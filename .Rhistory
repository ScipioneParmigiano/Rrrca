getwd()
devtools::build()     # Builds the package
devtools::install()
devtools::build()     # Builds the package
devtools::install()
library(Rrrca)
# Create an instance of MyClass
obj <- new(MyClass$MyClass, 3, 3)
# Get the matrix
print(obj$getMatrix())
library(Rrrca)
# Builds the package
devtools::install()
library(Rrrca)
# Create an instance of MyClass
obj <- new(MyClass$MyClass, 3, 3)
devtools::build()     # Builds the package
Rcpp::compileAttributes()
devtools::build()     # Builds the package
devtools::build()     # Builds the package
devtools::build()     # Builds the package
devtools::clean_dll()  # Clean old DLLs
devtools::document()   # Update NAMESPACE and documentation
devtools::build()
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
devtools::install()
library(Rrrca)
# Create an instance of MyClass
obj <- new(MyClass$MyClass, 3, 3)
ls(Rrrca)
library(Rrrca)
ls(Rrrca)
ls("Rrrca")
ls(getNamespaceExports("Rrrca"))
ls(getNamespaceExports("dplyr"))
library(dplyr)
installed.packages(dplyr)
installed.packages("dplyr")
library(dplyr)
installed.packages("stats")
library(stats)
ls(getNamespaceExports("stats"))
ls(getNamespaceExports(stats))
ls_env(pkg_env(stats))
installed.packages("stats")
install.packages("pryr")
library(pryr)
ls_env(pkg_env(stats))
library(pryr)
library(stats)
ls_env(pkg_env(stats))
objects(stats)
objects(Rrrca)
ls(getNamespace(stats))
ls(getNamespace(Rrrca))
# Check if the namespace is available
if ("Rrrca" %in% search()) {
print("Namespace loaded")
} else {
print("Namespace not loaded")
}
library(Rrrca)
# Check if the namespace is available
if ("Rrrca" %in% search()) {
print("Namespace loaded")
} else {
print("Namespace not loaded")
}
installed.packages()["Rrrca", ]
tryCatch({
library(Rrrca)
}, error = function(e) {
message("Error loading package: ", e$message)
})# Set a new matrix
(MyClass$MyClass, 3, 3)
obj <- new(MyClass$MyClass, 3, 3)
Rrrca::`*`()
Rrrca::`*`(1,2)
?Rrrca::`*`(1,2)
Rrrca::`*`(2,2)
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
devtools::install()
library(Rrrca)
ls(getNamespaceExports("Rrrca"))
#Create an instance of MyClass
obj <- new(MyClass$MyClass, 3, 3)
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
devtools::install()
library(Rrrca)
ls(getNamespaceExports("Rrrca"))
#Create an instance of MyClass
obj <- new(MyClass$MyClass, 3, 3)
Rrrca::rcppeigen_hello_world()
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
#Create an instance of MyClass
obj <- new(MyClass, 3, 3)
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
??load_module
??load_module
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
devtools::install()
library(Rrrca)  # Replace with your package name
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
devtools::install()
library(Rrrca)  # Replace with your package name
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
devtools::install()
devtools::install()
library(Rrrca)
# Create a Student object
student <- RcppStudent::Student("John Doe", 20, TRUE)
# Create a Student object
student <- RcppStudentEx::Student("John Doe", 20, TRUE)
# Create a Student object
student <- Student("John Doe", 20, TRUE)
?Rrrca::Student
??Rrrca::Student
ben = new(Student, name = "Ben", age = 26, male = TRUE)
ben$LikesBlue()
# [1] TRUE
ben$GetAge()
# [1] 26
ben$IsMale()
# [1] TRUE
ben$GetName()
# [1] "Ben"
ben$GetFavoriteNumbers()
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
devtools::build()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
devtools::build()
devtools::build()
Rcpp::compileAttributes()
devtools::build()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
devtools::build()
Rcpp::compileAttributes()
devtools::build()
Rcpp::compileAttributes()
devtools::build()
Rcpp::compileAttributes()
devtools::build()
Rcpp::compileAttributes()
devtools::build()
Rcpp::compileAttributes()
devtools::build()
Rcpp::compileAttributes()
devtools::build()
devtools::clean_dll()
devtools::build()
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
library(Rcpp)
Rcpp::loadModule("RcppDistributionEmbedding", TRUE)
Rcpp::compileAttributes()
devtools::build()
Rcpp::compileAttributes()
devtools::build()
Rcpp::compileAttributes()
devtools::build()
devtools::install()
library(Rrrca)
library(Rrrca)
devtools::install()
devtools::build()
Rcpp::compileAttributes()
devtools::build()
Rcpp::compileAttributes()
devtools::build()
devtools::install()
library(Rrrca)
devtools::clean_dll()
library(Rrrca)
Rcpp::compileAttributes()
devtools::build()
devtools::install()
library(Rrrca)
ben = new(DistributionEmbedding, 1:3)
ben = new(DistributionEmbedding, matrix(1:9), nrow=3)
ben = new(DistributionEmbedding, matrix(1:9, nrow=3))
ben
ben.getMatrix()
getMatrix(ben)
methods(ben)
list(ben)
ben::getMatrix()
ben = new(DistributionEmbedding, matrix(1:9, nrow=3))
ben
ben$getMatrix()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
library(Rrrca)
Rrrca::DistributionEmbedding
Rcpp::compileAttributes()
Rcpp::compileAttributes()
devtools::build()
devtools::install()
library(Rrrca)
Rrrca::DistributionEmbedding
devtools::clean_dll()
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::build()
devtools::install()
library(Rrrca)
Rrrca::DistributionEmbedding
